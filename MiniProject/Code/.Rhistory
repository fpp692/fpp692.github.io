# Updated values
n2 = 10
k2 = 2
posterior_beta2 = dbeta(x, shape1 = k2 + 1 , shape2 = n2 - k2 + 1)
# Mode
mode_posterior_beta2 = x[which.max(posterior_beta2)]
mode_posterior_beta2
# Intervals
#library(coda)
samples2 = rbeta(1e5,shape = k2 + 1, shape2 = n2 - k2 + 1)
hpd2 = HPDinterval(as.mcmc(samples2),prob=0.95)
abline(v = hpd2, lty = 1)
a = 0.25
eqi2 = quantile(samples2,probs=c(a/2,1-(a/2)))
abline(v = eq2i,lty = 2,col='red')
abline(v = eqi2,lty = 2,col='red')
x = seq(0,1,0.001)
test_beta = dbeta(x,shape1 = 1,shape2 = 3)
plot(x,test_beta)
graphics.off()
# Task A
k = 40
n = 200
posterior_beta = dbeta(x, shape1 = k + 1 , shape2 = n - k + 1)
# Mode
posterior_mode = x[which.max(posterior_beta)]
# Intervals
#library(coda)
samples = rbeta(1e5,shape = k + 1, shape2 = n - k + 1)
hpd = HPDinterval(as.mcmc(samples),prob=0.95)
a = 0.25
eqi = quantile(samples,probs=c(a/2,1-(a/2)))
# Updated values
n2 = 10
k2 = 2
posterior_beta2 = dbeta(x, shape1 = k2 + 1 , shape2 = n2 - k2 + 1)
# Mode
mode_posterior_beta2 = x[which.max(posterior_beta2)]
# Intervals
#library(coda)
samples2 = rbeta(1e5,shape = k2 + 1, shape2 = n2 - k2 + 1)
hpd2 = HPDinterval(as.mcmc(samples2),prob=0.95)
a = 0.25
eqi2 = quantile(samples2,probs=c(a/2,1-(a/2)))
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta)
abline(v = hpd, lty = 1)
abline(v = eqi,lty = 2,col='red')
plot(x,posterior_beta2)
abline(v = hpd2, lty = 1)
abline(v = eqi2,lty = 2,col='red')
# Task B
k = 40
n = 200
alpha = 1
beta = 3
posterior_beta_inf = dbeta(x, shape1 = k + alpha , shape2 = n - k + beta)
plot(x,posterior_beta_inf)
# Task B
kb = 40
nb = 200
alphab = 1
betab = 3
posterior_beta_inf = dbeta(x, shape1 = kb + alphab , shape2 = nb - kb + betab)
plot(x,posterior_beta_inf)
# Mode
mode_posterior_beta_inf = x[which.max(posterior_beta_inf)]
mode_posterior_beta_inf
# Intervals
#library(coda)
samplesb = rbeta(1e5,shape = kb + 1, shape2 = nb - kb + 1)
abline(v = hpdb, lty = 1)
hpdb = HPDinterval(as.mcmc(samplesb),prob=0.95)
abline(v = hpdb, lty = 1)
a = 0.25
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta_inf)
abline(v = hpdb, lty = 1)
abline(v = eqib,lty = 2,col='red')
# Task B
kb = 40
nb = 200
alphab = 1
betab = 3
posterior_beta_inf = dbeta(x, shape1 = kb + alphab , shape2 = nb - kb + betab)
# Mode
mode_posterior_beta_inf = x[which.max(posterior_beta_inf)]
# Intervals
#library(coda)
samplesb = rbeta(1e5,shape = kb + 1, shape2 = nb - kb + 1)
hpdb = HPDinterval(as.mcmc(samplesb),prob=0.95)
a = 0.25
eqib = quantile(samplesb,probs=c(a/2,1-(a/2)))
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta_inf)
abline(v = hpdb, lty = 1)
abline(v = eqib,lty = 2,col='red')
# Updated values
kb2 = 4
nb2 = 20
alphab = 1
betab = 3
posterior_beta_inf2 = dbeta(x, shape1 = kb2 + alphab , shape2 = nb2 - kb2 + betab)
# Mode
mode_posterior_beta_inf2 = x[which.max(posterior_beta_inf2)]
# Intervals
#library(coda)
samplesb2 = rbeta(1e5,shape = kb2 + 1, shape2 = nb2 - kb2 + 1)
hpdb2 = HPDinterval(as.mcmc(samplesb2),prob=0.95)
a = 0.25
eqib2 = quantile(samplesb2,probs=c(a/2,1-(a/2)))
plot(x,posterior_beta_inf2)
abline(v = hpdb2, lty = 1)
abline(v = eqib2,lty = 2,col='red')
# Updated values
kb2 = 4
nb2 = 20
alphab3 = 2
betab3 = 2
posterior_beta_inf3 = dbeta(x, shape1 = kb2 + alphab3 , shape2 = nb2 - kb2 + betab3)
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta)
abline(v = hpd, lty = 1)
abline(v = eqi,lty = 2,col='red')
plot(x,posterior_beta2)
abline(v = hpd2, lty = 1)
abline(v = eqi2,lty = 2,col='red')
x = seq(0,1,0.001)
graphics.off()
# Task A
k = 40
n = 200
posterior_beta = dbeta(x, shape1 = k + 1 , shape2 = n - k + 1)
# Mode
posterior_mode = x[which.max(posterior_beta)]
# Intervals
#library(coda)
samples = rbeta(1e5,shape = k + 1, shape2 = n - k + 1)
hpd = HPDinterval(as.mcmc(samples),prob=0.95)
a = 0.25
eqi = quantile(samples,probs=c(a/2,1-(a/2)))
# Updated values
n2 = 20
k2 = 4
posterior_beta2 = dbeta(x, shape1 = k2 + 1 , shape2 = n2 - k2 + 1)
# Mode
mode_posterior_beta2 = x[which.max(posterior_beta2)]
# Intervals
#library(coda)
samples2 = rbeta(1e5,shape = k2 + 1, shape2 = n2 - k2 + 1)
hpd2 = HPDinterval(as.mcmc(samples2),prob=0.95)
a = 0.25
eqi2 = quantile(samples2,probs=c(a/2,1-(a/2)))
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta)
abline(v = hpd, lty = 1)
abline(v = eqi,lty = 2,col='red')
plot(x,posterior_beta2)
abline(v = hpd2, lty = 1)
abline(v = eqi2,lty = 2,col='red')
# Task B
kb = 40
nb = 200
alphab = 1
betab = 3
posterior_beta_inf = dbeta(x, shape1 = kb + alphab , shape2 = nb - kb + betab)
# Mode
mode_posterior_beta_inf = x[which.max(posterior_beta_inf)]
# Intervals
#library(coda)
samplesb = rbeta(1e5,shape = kb + alphab, shape2 = nb - kb + betab)
hpdb = HPDinterval(as.mcmc(samplesb),prob=0.95)
a = 0.25
eqib = quantile(samplesb,probs=c(a/2,1-(a/2)))
# Updated values
kb2 = 4
nb2 = 20
alphab = 1
betab = 3
posterior_beta_inf2 = dbeta(x, shape1 = kb2 + alphab , shape2 = nb2 - kb2 + betab)
# Mode
mode_posterior_beta_inf2 = x[which.max(posterior_beta_inf2)]
# Intervals
#library(coda)
samplesb2 = rbeta(1e5,shape = kb2 + alphab, shape2 = nb2 - kb2 + betab)
hpdb2 = HPDinterval(as.mcmc(samplesb2),prob=0.95)
a = 0.25
eqib2 = quantile(samplesb2,probs=c(a/2,1-(a/2)))
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta)
abline(v = hpd, lty = 1)
abline(v = eqi,lty = 2,col='red')
plot(x,posterior_beta2)
abline(v = hpd2, lty = 1)
abline(v = eqi2,lty = 2,col='red')
# Task B
kb = 40
nb = 200
alphab = 1
betab = 3
posterior_beta_inf = dbeta(x, shape1 = kb + alphab , shape2 = nb - kb + betab)
# Mode
mode_posterior_beta_inf = x[which.max(posterior_beta_inf)]
# Intervals
#library(coda)
samplesb = rbeta(1e5,shape = kb + alphab, shape2 = nb - kb + betab)
hpdb = HPDinterval(as.mcmc(samplesb),prob=0.95)
a = 0.25
eqib = quantile(samplesb,probs=c(a/2,1-(a/2)))
# Updated values
kb2 = 4
nb2 = 20
alphab = 1
betab = 3
posterior_beta_inf2 = dbeta(x, shape1 = kb2 + alphab , shape2 = nb2 - kb2 + betab)
# Mode
mode_posterior_beta_inf2 = x[which.max(posterior_beta_inf2)]
# Intervals
#library(coda)
samplesb2 = rbeta(1e5,shape = kb2 + alphab, shape2 = nb2 - kb2 + betab)
hpdb2 = HPDinterval(as.mcmc(samplesb2),prob=0.95)
a = 0.25
eqib2 = quantile(samplesb2,probs=c(a/2,1-(a/2)))
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta_inf)
abline(v = hpdb, lty = 1)
abline(v = eqib,lty = 2,col='red')
plot(x,posterior_beta_inf2)
abline(v = hpdb2, lty = 1)
abline(v = eqib2,lty = 2,col='red')
kb = 40
nb = 200
alphab = 1
betab = 3
posterior_beta_inf = dbeta(x, shape1 = kb + alphab , shape2 = nb - kb + betab)
# Mode
mode_posterior_beta_inf = x[which.max(posterior_beta_inf)]
# Intervals
#library(coda)
samplesb = rbeta(1e5,shape = kb + 1, shape2 = nb - kb + 1)
hpdb = HPDinterval(as.mcmc(samplesb),prob=0.95)
a = 0.25
eqib = quantile(samplesb,probs=c(a/2,1-(a/2)))
# Updated values
kb2 = 4
nb2 = 20
alphab3 = 2
betab3 = 2
posterior_beta_inf3 = dbeta(x, shape1 = kb2 + alphab3 , shape2 = nb2 - kb2 + betab3)
# Mode
mode_posterior_beta_inf3 = x[which.max(posterior_beta_inf3)]
# Intervals
#library(coda)
samplesb2 = rbeta(1e5,shape = kb2 + 1, shape2 = nb2 - kb2 + 1)
hpdb2 = HPDinterval(as.mcmc(samplesb2),prob=0.95)
a = 0.25
eqib2 = quantile(samplesb2,probs=c(a/2,1-(a/2)))
abline(v = eqib2,lty = 2,col='red')
# Plot
par(mfrow=c(1,2))
plot(x,posterior_beta_inf)
abline(v = hpdb, lty = 1)
abline(v = eqib,lty = 2,col='red')
plot(x,posterior_beta_inf2)
abline(v = hpdb2, lty = 1)
abline(v = eqib2,lty = 2,col='red')
getwd()
setwd('/Users/Fernando/Documents/CMEECourseWork/MiniProject/Code/')
# Read data
cubic_coef = read.csv('../Data/CubicModels.csv')
nlls1_coef = read.csv('../Data/NLLS_model1.csv')
nlls2_coef = read.csv('../Data/NLLS_model2.csv')
nlls3_coef = read.csv('../Data/NLLS_model3.csv')
full_AIC = cbind(cubic_coef$AIC,nlls1_coef$AIC,nlls2_coef$AIC,nlls3_coef$AIC)
res_AIC = matrix(0,nrow=nrow(cubic_coef),ncol=4)
for (i in 1:nrow(full_AIC)) {
comp = full_AIC[i,1:4]
low = min(comp)
comp = abs(low - comp) <= 2
res_AIC[i,] = comp
}
res_AIC = as.data.frame(res_AIC)
colnames(res_AIC) = names
names = c('cubic','s1','s2','s3')
colnames(res_AIC) = names
results = data.frame(res_AIC,cubic_coef[,9:12])
for (i in levels(results$Habitat)) {
sub_hab = subset(results,results$Habitat == i)
barplot(c(sum(sub_hab[,1])/nrow(sub_hab),sum(sub_hab[,2])/nrow(sub_hab),sum(sub_hab[,3])/nrow(sub_hab),sum(sub_hab[,4])/nrow(sub_hab)),main=i,names.arg=c("Cubic", "Schoolfield I", "Schoolfield II","Schoolfield III"))
}
levels(results$Habitat)
results[results$Habitat %in% c('Terrestrial','terrestrial'),]
dim(subset(results,results$Habitat == 'Terrestrial')
dim(subset(results,results$Habitat == 'Terrestrial')
)
dim(subset(results,results$Habitat == 'Terrestrial'))
dim(subset(results,results$Habitat == 'terrestrial'))
dim(results[results$Habitat %in% c('Terrestrial','terrestrial'),])
964+48
levels(results$Habitat)
results
results[results$Habitat %in% c('Marine','marine')]
results[results$Habitat %in% c('Marine','marine').]
results[results$Habitat %in% c('Marine','marine'),]
results[results$Habitat %in% c('Marine','marine'),1]
sum(results[results$Habitat %in% c('Marine','marine'),1])
sum(results[results$Habitat %in% c('Marine','marine'),2])
sum(results[results$Habitat %in% c('Marine','marine'),3])
sum(results[results$Habitat %in% c('Marine','marine'),4])
for (i in 1:4) {
marine[i] = sum(results[results$Habitat %in% c('Marine','marine'),i])
terrestrial[i] = sum(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])
freshwater[i] = sum(results[results$Habitat %in% c('freshwater'),i])
}
marine = (0,0,0,0)
terretrial = (0,0,0,0)
marine = c(0,0,0,0)
terretrial = c(0,0,0,0)
freshwater = c(0,0,0,0)
for (i in 1:4) {
marine[i] = sum(results[results$Habitat %in% c('Marine','marine'),i])
terrestrial[i] = sum(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])
freshwater[i] = sum(results[results$Habitat %in% c('freshwater'),i])
}
marine = c(0,0,0,0)
terrestrial = c(0,0,0,0)
freshwater = c(0,0,0,0)
for (i in 1:4) {
marine[i] = sum(results[results$Habitat %in% c('Marine','marine'),i])
terrestrial[i] = sum(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])
freshwater[i] = sum(results[results$Habitat %in% c('freshwater'),i])
}
marine
terrestrial
freshwater
levels('aquatic')
levels(results$Habitat)
aquatic = c(0,0,0,0)
marine = c(0,0,0,0)
terrestrial = c(0,0,0,0)
freshwater = c(0,0,0,0)
aquatic = c(0,0,0,0)
for (i in 1:4) {
marine[i] = sum(results[results$Habitat %in% c('Marine','marine'),i])
terrestrial[i] = sum(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])
freshwater[i] = sum(results[results$Habitat %in% c('freshwater'),i])
aquatic[i] = sum(results[results$Habitat %in% c('aquatic'),i])
}
aquatic
terrestrial
cbind(marine,terrestrial,freshwater)
data.frame(c('Cubic','SI','SII','SIII',cbind(marine,terrestrial,freshwater)))
cbind(marine,terrestrial,freshwater)
c('Cubic','SI','SII','SIII')
cbind(c('Cubic','SI','SII','SIII'),marine,terrestrial,freshwater)
as.data.frame(cbind(c('Cubic','SI','SII','SIII'),marine,terrestrial,freshwater))
habitat = as.data.frame(cbind(c('Cubic','SI','SII','SIII'),marine,terrestrial,freshwater))
require('ggplot2')
models = c('Cubic','SI','SII','SIII')
habitat = as.data.frame(cbind(models,marine,terrestrial,freshwater))
habitat
ggplot(habitat,aes(models,value)) + geom_bar(aes(fill= variable),position='dodge',stat='identity')
ggplot(habitat,aes(models,value,variable)) + geom_bar(position='dodge',stat='identity')
habitat$models
habitat$value
habitat
marine
melt(results,id.vars='models')
?melt
??melt
library(reshape2)
melt(results,id.vars='models')
?gather
require('reshape')
require('reshape2')
?gather
library(dplyr)
?gather
require('dplyr')
?gather
require('tidyr')
?gather
habitats
habitat
habitat %>% gather(counts,[2:4])
habitat %>% gather(counts,marine:freshwater)
habitat
gather(habitat,key=c('marine','terrestrial','freshwater'),value='counts')
habitat %>% gather(counts,marine:freshwater)
habitat %>% gather(hab,counts,marine:freshwater)
habitat2 = habitat %>% gather(hab,counts,marine:freshwater)
habitat = as.data.frame(cbind(models,marine,terrestrial,freshwater))
habitat2 = habitat %>% gather(hab,counts,marine:freshwater)
habitat
habitat2
ggplot(habitat2,aes(models,counts)) + geom_bar(aes(fill = hab),position = 'dodge',stat='identity')
?geom_bar
ggplot(habitat2,aes(models,counts)) + geom_bar(aes(fill = hab),position = 'dodge',stat='count')
ggplot(habitat2,aes(models,counts)) + geom_bar(aes(y = counts,fill = hab),position = 'dodge',stat='count')
ggplot(habitat2,aes(models,counts)) + geom_bar(aes(fill = hab),position = 'dodge')
ggplot2.barplot(data=habitat2,xName='Model',yName='counts',groupName='Habitat',position=position_dodge())
ggplot(habitat2,aes(models,counts)) + geom_bar(aes(fill = hab),position = 'dodge',stat='count')
ggplot(habitat2,aes(models,counts)) + geom_bar(aes(fill = hab),position = 'dodge',stat='identity')
habitat2
marine = c(0,0,0,0)
terrestrial = c(0,0,0,0)
freshwater = c(0,0,0,0)
for (i in 1:4) {
marine[i] = sum(results[results$Habitat %in% c('Marine','marine'),i])/nrow(results[results$Habitat %in% c('Marine','marine'),i])
terrestrial[i] = sum(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])/nrow(results[results$Habitat %in% c('Marine','marine'),i])
freshwater[i] = sum(results[results$Habitat %in% c('freshwater'),i])/nrow(results[results$Habitat %in% c('Marine','marine'),i])
}
sum(results[results$Habitat %in% c('Marine','marine'),i])
results[results$Habitat %in% c('Marine','marine'),i]
marine = c(0,0,0,0)
terrestrial = c(0,0,0,0)
freshwater = c(0,0,0,0)
for (i in 1:4) {
marine[i] = sum(results[results$Habitat %in% c('Marine','marine'),i])/length(results[results$Habitat %in% c('Marine','marine'),i])
terrestrial[i] = sum(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])/length(results[results$Habitat %in% c('Marine','marine'),i])
freshwater[i] = sum(results[results$Habitat %in% c('freshwater'),i])/length(results[results$Habitat %in% c('Marine','marine'),i])
}
models = c('Cubic','SI','SII','SIII')
habitat = as.data.frame(cbind(models,marine,terrestrial,freshwater))
habitat2 = habitat %>% gather(hab,counts,marine:freshwater)
habitat2
marine = c(0,0,0,0)
terrestrial = c(0,0,0,0)
freshwater = c(0,0,0,0)
for (i in 1:4) {
marine[i] = sum(results[results$Habitat %in% c('Marine','marine'),i])/length(results[results$Habitat %in% c('Marine','marine'),i])
terrestrial[i] = sum(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])/length(results[results$Habitat %in% c('Terrestrial','terrestrial'),i])
freshwater[i] = sum(results[results$Habitat %in% c('freshwater'),i])/length(results[results$Habitat %in% c('freshwater'),i])
}
models = c('Cubic','SI','SII','SIII')
habitat = as.data.frame(cbind(models,marine,terrestrial,freshwater))
habitat2 = habitat %>% gather(hab,counts,marine:freshwater)
habitat2
ggplot(habitat2,aes(models,counts)) + geom_bar(aes(fill = hab),position = 'dodge',stat='identity')
ggplot(habitat2,aes(hab,counts)) + geom_bar(aes(fill = models),position = 'dodge',stat='identity')
ggplot(habitat2,aes(hab,counts)) + geom_bar(aes(fill = models),position = 'dodge',stat='identity') + scale_y_continuous(limits=c(0,1)
)
ggplot(habitat2,aes(hab,counts)) + geom_bar(aes(fill = models),position = 'dodge',stat='identity')
names(results)
levels(results$ConKingdom)
levels(results$StandardisedTraitName)
levels(results$ConKingdom)
length(results[results$ConKingdom %in% c('Metazao'),i])
length(results[results$ConKingdom %in% c('Metazoa'),i])
length(results[results$ConKingdom %in% c('Fungi'),i])
length(results[results$ConKingdom %in% c('Archea','Bacteria'),i])
length(results[results$ConKingdom %in% c('Plantea'),i])
length(results[results$ConKingdom %in% c('Plantae'),i])
length(results[results$ConKingdom %in% c('Chromista','Protista','Protozoa'),i])
monera = c(0,0,0,0)
fungi = c(0,0,0,0)
metazoa = c(0,0,0,0)
plantae = c(0,0,0,0)
protista = c(0,0,0,0)
for (i in 1:4) {
monera[i] = sum(results[results$ConKingdom %in% c('Archaea','Bacteria'),i])/length(results[results$ConKingdom %in% c('Archaea','Bacteria'),i])
fungi[i] = sum(results[results$ConKingdom %in% c('Fungi'),i])/length(results[results$ConKingdom %in% c('Fungi'),i])
metazoa[i] = sum(results[results$ConKingdom %in% c('Metazoa'),i])/length(results[results$ConKingdom %in% c('Metazoa'),i])
plantae[i] = sum(results[results$ConKingdom %in% c('Plantae'),i])/length(results[results$ConKingdom %in% c('Plantae'),i])
protista[i] = sum(results[results$ConKingdom %in% c('Chromista','Protista','Protozoa'),i])/length(results[results$ConKingdom %in% c('Chromista','Protista','Protozoa'),i])
}
kingdom = as.data.frame(cbind(models,monera,fungi,metazoa,plantae,protista))
kingdom = kingdom %>% gather(king,count,monera:protista)
kingdom
ggplot(kingdom,aes(king,counts)) + geom_bar(aes(fill = models),position = 'dodge',stat='identity')
fungi = c(0,0,0,0)
metazoa = c(0,0,0,0)
plantae = c(0,0,0,0)
monera = c(0,0,0,0)
fungi = c(0,0,0,0)
metazoa = c(0,0,0,0)
plantae = c(0,0,0,0)
protista = c(0,0,0,0)
for (i in 1:4) {
monera[i] = sum(results[results$ConKingdom %in% c('Archaea','Bacteria'),i])/length(results[results$ConKingdom %in% c('Archaea','Bacteria'),i])
fungi[i] = sum(results[results$ConKingdom %in% c('Fungi'),i])/length(results[results$ConKingdom %in% c('Fungi'),i])
metazoa[i] = sum(results[results$ConKingdom %in% c('Metazoa'),i])/length(results[results$ConKingdom %in% c('Metazoa'),i])
plantae[i] = sum(results[results$ConKingdom %in% c('Plantae'),i])/length(results[results$ConKingdom %in% c('Plantae'),i])
protista[i] = sum(results[results$ConKingdom %in% c('Chromista','Protista','Protozoa'),i])/length(results[results$ConKingdom %in% c('Chromista','Protista','Protozoa'),i])
}
kingdom = as.data.frame(cbind(models,monera,fungi,metazoa,plantae,protista))
kingdom = kingdom %>% gather(king,counts,monera:protista)
ggplot(kingdom,aes(king,counts)) + geom_bar(aes(fill = models),position = 'dodge',stat='identity')
levels(results$StandardisedTraitName)
length(results[results$StandardisedTraitName %in% c('Individual Length Growth Rate','Individual Mass Growth Rate','Population Growth Rate','Radial Growth Rate','Specific Growth Rate'),i])
length(results[results$StandardisedTraitName %in% c('Rate of photosynthesis'),i])
length(results[results$StandardisedTraitName %in% c('Rate of photosynthesis','gross photosynthesis','net photosynthesis'),i])
length(results[results$StandardisedTraitName %in% c('Mass-Specific Respiration Rate','respiration rate'),i]
)
growth = c(0,0,0,0)
photo = c(0,0,0,0)
resp = c(0,0,0,0)
for (i in 1:4) {
growth[i] = sum(results[results$StandardisedTraitName %in% c('Individual Length Growth Rate','Individual Mass Growth Rate','Population Growth Rate','Radial Growth Rate','Specific Growth Rate'),i])/length(results[results$StandardisedTraitName %in% c('Individual Length Growth Rate','Individual Mass Growth Rate','Population Growth Rate','Radial Growth Rate','Specific Growth Rate'),i])
photo[i] = sum(results[results$StandardisedTraitName %in% c('Rate of photosynthesis','gross photosynthesis','net photosynthesis'),i])/length(results[results$StandardisedTraitName %in% c('Rate of photosynthesis','gross photosynthesis','net photosynthesis'),i])
resp[i] = sum(results[results$StandardisedTraitName %in% c('Mass-Specific Respiration Rate','respiration rate'),i])/length(results[results$StandardisedTraitName %in% c('Mass-Specific Respiration Rate','respiration rate'),i])
}
metabolic = as.data.frame(cbind(models,growth,photo,resp))
metabolic = metabolic %>% gather(metabolic,counts,growth:resp)
ggplot(metabolic,aes(metabolic,counts)) + geom_bar(aes(fill = models),position = 'dodge',stat='identity')
